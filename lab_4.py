# -*- coding: utf-8 -*-
"""lab#4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dKt3mKDs8jVSanBbC9bB85GWvJKNgvTT
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

df = pd.read_csv('Fish.csv')

df

df.isna().sum()

df.duplicated().sum()

df.dtypes

import seaborn as sns

sns.countplot(x='Species', data=df)

X = df.drop('Species', axis=1)

y = df['Species']

X, y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.25, random_state=42)

from sklearn.feature_selection import SelectKBest, f_classif

selector = SelectKBest(f_classif, k=6)
selector.fit(X_train, y_train)

selector.scores_

cols = selector.get_support(indices=True)
cols

from sklearn.preprocessing import LabelEncoder, StandardScaler

encoder = LabelEncoder()
y = encoder.fit_transform(y)
y_map = {index:label for index,label in enumerate(encoder.classes_)}

y_map

y

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.25, random_state=42)

from sklearn.linear_model import LogisticRegression

log_model = LogisticRegression()
log_model.fit(X_train,y_train)

log_model.score(X_test,y_test)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(random_state=42).fit(X_train, y_train)
y_pred_rfc = model.predict(X_test)
model.score(X_test, y_test)

y_pred_log = log_model.predict(X_test)

from sklearn.metrics import confusion_matrix

matrix = confusion_matrix(y_test, y_pred_log)

from sklearn.metrics import roc_curve, roc_auc_score, f1_score, accuracy_score, precision_score, recall_score

l = ['micro', 'macro', 'weighted']
scores = []
for i in l:
    scores.append(f1_score(y_test, y_pred_log, average=i))
scores

print('Micro Precision: {:.2f}'.format(precision_score(y_test, y_pred_log, average='micro')))
print('Micro Recall: {:.2f}'.format(recall_score(y_test, y_pred_log, average='micro')))
print('Micro F1-score: {:.2f}\n'.format(f1_score(y_test, y_pred_log, average='micro')))

print('Macro Precision: {:.2f}'.format(precision_score(y_test, y_pred_log, average='macro')))
print('Macro Recall: {:.2f}'.format(recall_score(y_test, y_pred_log, average='macro')))
print('Macro F1-score: {:.2f}\n'.format(f1_score(y_test, y_pred_log, average='macro')))

print('Weighted Precision: {:.2f}'.format(precision_score(y_test, y_pred_log, average='weighted')))
print('Weighted Recall: {:.2f}'.format(recall_score(y_test, y_pred_log, average='weighted')))
print('Weighted F1-score: {:.2f}'.format(f1_score(y_test, y_pred_log, average='weighted')))

from sklearn.metrics import classification_report
print('\nClassification Report\n')
print(classification_report(y_test, y_pred_log, target_names=['Class 0', 'Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6']))

import matplotlib.pyplot as plt

sns.heatmap(matrix, annot=True, cbar=None, cmap='Blues')
plt.title('Confusion Matrix'), plt.tight_layout()
plt.ylabel('True Class'), plt.xlabel('Predicted Class')
plt.show()
print(y_map)

# loading library
import pickle

# create an iterator object with write permission - model.pkl
with open('model_pkl', 'wb') as files:
    pickle.dump(model, files)